Analysis
=======

1 - Targets :: Most important:
----

- Reader might not know yet about Class Reloading --> wonderful world await them
- Reader would like to have quick guide to setup class reloading in there project --> Promise them they will have it --> capture their attention


Ideas:
---

- Very difficult technique, but don't scare them away

Structure:
-----



Content:
=======


Creating the amazing: Java class reloading
============

In Java, class reloading is a very rare topic to come by, you can always find projects that developers have to restart server with every class change and no one complain about it - that is a fact about Java development. We have worked like that since our first day with Java, but is Java class reloading that difficult to achieve, and could that problem be both challenging and exciting to solve? In this article, I will try to address the problem, thus to help you create an amazing day with this Ever-Sacred topic.

Why Java class reloading is so difficult?
------------

Nowadays you can see **[JRebel](http://zeroturnaround.com/software/jrebel/)** advertisement every where, it's a commercial solution for Java class reloading. In their ads, they say it would help boost up 17% our performance. I totally disagree with that, the number would be at least 500% ! It's true. Don't underestimate server restarts as normal waste of time. It's an interruption to your flow of logic, and for myself, it creates a lot of distraction too - I find myself often change to newspaper tab or search for porn with each restarting cycle.

No doubt every developer out there would love to have instant reload, and every Project Manager would love to have that and meet their deadlines. But why they don't buy JRebel licences? Because it's God-Damn expensive. 

Don't misjudge the JRebel guys as greedy bastards, instead, they are just honest people trying to get money for their hard work. Solutions like such is very difficult to implement, and I bet that you can't find another company out there offering a cheaper solution for this. Not even me.

Then what I'm trying doing here?
---------------

I'm here to give you are a free solution to this problem. Believe it or not, class reloading is both difficult and easy. And if after you have read this post and still find it difficult, then I assure you that trying to solve this problem is both challenging and exciting. And a long the way, you will find yourself grown up - as a Java developer, and as a software Architecture.

The first example: Reloading 1 class
=============

Please have a look at this short file:  
*All the files in this article are publicly available at [https://github.com/quanla/classreloading](https://github.com/quanla/classreloading)*

~~~java

package qj.blog.classreloading.example1;

import static java.lang.System.*;

import qj.util.ReflectUtil;
import qj.util.lang.DynamicClassLoader;

/**
 * Created by Quan on 26/10/2014.
 */
public class StaticInt {
	public static void main(String[] args) {
		Class<?> userClass1 = User.class;
		Class<?> userClass2 = new DynamicClassLoader("target/classes")
				.load("qj.blog.classreloading.example1.StaticInt$User");


		out.println("Seems to be the same class:");
		out.println(userClass1.getName());
		out.println(userClass2.getName());
		out.println();

		out.println("But why there are 2 different class loaders:");
		out.println(userClass1.getClassLoader());
		out.println(userClass2.getClassLoader());
		out.println();

		User.age = 11;
		out.println("And different age values:");
		out.println((int) ReflectUtil.getStaticFieldValue("age", userClass1));
		out.println((int) ReflectUtil.getStaticFieldValue("age", userClass2));
	}

	public static class User {
		public static int age = 10;
	}
}


~~~

And here is the output:

~~~
Seems to be the same class:
qj.blog.classreloading.example1.StaticInt$User
qj.blog.classreloading.example1.StaticInt$User

But why there are 2 different class loaders:
qj.util.lang.DynamicClassLoader@3941a79c
sun.misc.Launcher$AppClassLoader@1f32e575

And different age values:
11
10
~~~

So as you can see in this example, classes are not "**Global**". JVM can load and use 2 definitions of the same class at the same time, thus we can switch between them and use flexibly.

Right now you can access my [GitHub](https://github.com/quanla/classreloading), load that source code and play it with yourself.

Here is the explanation of the 2 class definitions living together:

<< image with 2 class loaders on right col >>

As you can see, the 2 classes are not only loaded separately, but also their static members are created separately for each of them.

The default class loader `sun.misc.Launcher$AppClassLoader` is pretty fixed, you can assume that it will stay in the JVM forever - together with all the classes it has loaded (`User` class). But the Dynamic class loader on the other hand can go away (Garbage Collected, or GC-ed ), and we can create as many Dynamic Class loaders as we want, and reload `User` class as many times as we want to. It's easy.

Here you can see that I use a custom class loader: DynamicClassLoader. The DynamicClassLoader does a fine job capable of every thing the default class loader does, and more.

The Dynamic Class Loader:
----------------------------

Unlike the default behaviour of a class loader, our Dynamic Class Loader has a more aggressive strategy. A normal class loader would give its parent classloader the priority and only load classes that its parent can not load. This seems nice and suitable for normal circumstances, but not in our case. The Dynamic Class loader on the other hand will try to look through all its class paths and resolve the target class before it give up the right to its parent. Remember that whenever it gives up the loading of one class ( A ) to its parent, all the linked classes from class A will then be loaded by the parent class loader and that parent class loader will never refer to our class loader for help.

Few more things about this Dynamic Class Loader:
- It's capable of loading all system classes and library - if you specify in it's classpaths.
- The loaded classes have the same performance and other attributes as other classes loaded by the default class loader.
- The Dynamic Class Loader can be Garbage Collected together with all of it's loaded classes and objects.

In this example 1, the Dynamic Classloader is created with only 1 class path: "target/classes" ( in our current directory ), so it's capable of loading all the classes reside in that classpath. For all the classes not in there, it will have to refer to the parent class loader. For example we need to load String class in our StaticInt class, and our class loader does not have access to the rt.jar in our jre folder, so the String class of the parent class loader will be used ( assuming that String class is managed by normal classloaders ).

With this small example, we have opened a whole new world, if 2 versions of the same class can coexist, how about 2 versions of the same system? Or a system that can host and load/unload sub-systems? Let's master this technique for your own good.

Example 2: Reloading continuously
================

This example will show you that the JRE can reload our system classes an infinite number of time.

~~~ java
package qj.blog.classreloading.example2;

import qj.util.ReflectUtil;
import qj.util.ThreadUtil;
import qj.util.lang.DynamicClassLoader;

/**
 * Created by Quan on 31/10/2014.
 */
public class ReloadingContinuously {
	public static void main(String[] args) {
		for (;;) {
			Class<?> userClass = new DynamicClassLoader("target/classes")
				.load("qj.blog.classreloading.example2.ReloadingContinuously$User");
			ReflectUtil.invokeStatic("hobby", userClass);
			ThreadUtil.sleep(2000);
		}
	}
	
	@SuppressWarnings("UnusedDeclaration")
	public static class User {
		public static void hobby() {
			playFootball(); // Will comment later
//			playBasketball(); // Will uncomment later
		}
		
		// Will comment later
		public static void playFootball() {
			System.out.println("Play Football");
		}
		
		// Will uncomment later
//		public static void playBasketball() {
//			System.out.println("Play Basketball");
//		}
	}
}
~~~

Here is the output:

~~~
...
Play Football
Play Football
Play Football
Play Basketball
Play Basketball
Play Basketball

~~~

In this example, we set up an infinite loop, and with each cycle, we create a brand new class loader and drop all the references to the old class loader and classes. I also demonstrate here the ability to pick up new class definition by leaving parts of the class in comments, so when you change the class by comment/uncomment code lines, you will see the latest compiled classes is in used.

Every time a new instance of `DynamicClassLoader` is created, and we ask it to load the User class, it will go to our "`target/classes`" folder and try to pick up the newest compiled class file. So we can reload class - on the fly.

<< Image of many Classloaders created and GC-ed >>

Another reason point worth notify in this example is the ability to reload the class structure - adding new method playBasketball and removing old method playFootball. This is a very important feature of class reloading that's definitely needed during development, but is not available in JVM HotSwap technique and JRebel approach, although based on JVM HotSwap and capable of this feature, has to use an ugly and difficult workaround with class manipulation and reflection. This explain why our approach is the most elegant and official way to do class reloading.


Example 3: Simple context reloading
==============

This example we will have a setup much closer to a normal application, with a simple context, a service and a model

<< >>

This setup is very similar to example 2 in the way it work: infinite loop and recreate the class loader plus drop all old references with each cycle. The difference is the class loader is not loading a single class, but instead a much more complex business is executed: create a context object, invoke its init method which in turn will create a full application object tree with service and model.

As the number of classes and objects grow, our step of "drop old references" will also be more delicate, as this is the biggest reason why class reloading is so difficult. We will have to make sure that once the new context created all the references to the old classes and objects are dropped. This can sound a little difficult, but soon I will show you the way to deal with it elegantly.

The main method here will have a hold of the context object, and **that is the only link**. If we break that link, the context object and the context class, and the service object ... will all be eligible for Garbage Collected... We know it because our setup here is rather simple, with the knowledge that most of the system will be reloaded, and the persisted part will have no hideous cache to store any old references. With a clean design like this, we know exactly what to be cut and created a new in order to totally dump all the old classes and objects.

A little explanation about why normally classes are so persistent and not get Garbage Collected:
- Normally we load all our classes into the default classloader
- The class - class loader is a 2-ways relationship with the classloader also cache all the classes it has loaded
- So as long as the classloader still connected to any alive thread, everything (all loaded classes) will be immune to the Garbage Collector.
- There is a little chance that the default classloader is not garbage collected, we can, but it will require stopping all current threads launch anew inside new DefaultClassLoader's scope ( Luckily we don't have to reload the Thread class itself because all those basic classes are loaded and cached by a special JVM classloader )

Example 4: Reloading context while persisting connection object
============

In the next example I will show you how to keep the old good connection object. 

~~~ java

package qj.blog.classreloading.example4;

import static qj.util.ReflectUtil.*;

import qj.util.ThreadUtil;
import qj.util.lang.ExceptingClassLoader;

/**
 * Created by Quan on 01/11/2014.
 */
public class KeepConnectionPool {
	public static void main(String[] args) {

		ConnectionPool pool = new ConnectionPool();

		for (;;) {
			Object context = createContext(pool);

			invokeService(context);

			ThreadUtil.sleep(2000);
		}
	}

	private static void invokeService(Object context) {
		Object hobbyService = getFieldValue("userService", context);
		invoke("hello", hobbyService);
	}
	
	private static Object createContext(ConnectionPool pool) {
		ExceptingClassLoader classLoader = new ExceptingClassLoader(
				(className) -> className.contains("$Connection"),
				"target/classes");
		Class<?> contextClass = classLoader.load(KeepConnectionPool.class.getName() + "$Context");
		Object context = newInstance(contextClass);
		
		setFieldValue(pool, "pool", context);
		invoke("init", context);

		return context;
	}

	@SuppressWarnings("UnusedDeclaration")
	public static class Context {
		public ConnectionPool pool;
		
		public UserService userService = new UserService();
		
		public void init() {
			userService.pool = pool;
		}
	}
	
	public static class UserService {
		ConnectionPool pool;
		
		@SuppressWarnings("UnusedDeclaration")
		public void hello() {
			System.out.println("UserService CL: " + this.getClass().getClassLoader()); // Will output ExceptingClassLoader
			System.out.println("Hi " + pool.getConnection().getUserName());
		}
	}
	
	public static class ConnectionPool {
		Connection conn = new Connection();
		
		public Connection getConnection() {
			return conn;
		}
	}
	
	public static class Connection {
		public String getUserName() {
			System.out.println("Connection CL: " + this.getClass().getClassLoader()); // Will output DefaultClassLoader
			return "Joe";
		}
	}
}

~~~

Output:

~~~

UserService CL: qj.util.lang.ExceptingClassLoader@4fca772d
Connection CL: sun.misc.Launcher$AppClassLoader@1f32e575
Hi Joe

~~~

In real life projects, there would be many other things you want to keep through the reloading phases. Actually, the subject of keeping parts of the system out of reloading cycle is crucial, and is definitely needed. If we have to reload all parts of our system, then our reloading solution is no better than restarting the whole server. The question is how to draw a clean separation line of what to persist and what to reload.

Similar setup to Example 3, with infinite loop and creating DynamicClassLoader with each cycle, but this example will do a little differently by creating and maintaining a ConnectionPool object outside of the reloading cycles. Each time a context object is created, it will receive the reference to the persisted ConnectionPool object, and thus, they are linked together again.

<< Image of persisted resources and reloading resources >>

You can see that also the Connection and Connection Pool objects are referred from our reloaded Context and Service, they totally reside in the persisted scope, and loaded by JVM's default class loader.

In this example, the DynamicClassLoader is not used but instead a sub-class of it called ExceptingClassLoader which allow us to NOT load certain classes. We need to use this subclass because the mock classes Connection and ConnectionPool reside in the same module as our main class, thus are to be loaded by the DynamicClassLoader, we don't want this to happen. If the DynamicClassLoader load those Connection classes, then 2 versions of those classes will be used, one in the persisted part and one in the reloaded part. When we call the init method in Context object it will throw an error as it find out the ConnectionPool object in parameter is not of the same class as the parameter type.

In your project, you should separate those persisted classes in a separated module and exclude that module from the DynamicClassLoader's classpaths, so you don't have to worry that the DynamicClassLoader accidentally load them.


Example 5: The complex Web App with class reloading
=====

This example will be very similar to what a normal web application should look like. The project setup include: MySQL, Jetty Embeded Web Server, Commons Dbcp

This is not the final solution for all the applications out there, the actual solution will vary from project to project, framework to framework. What I'm trying to show here is that it is achievable and with your knowledge of the system and the class reloading mechanism, you will be able to make it happen.


Difficulties:
===========

- Frameworks like Hibernate, OpenJPA, or even Log4j have an internal cache for classes, and this would lead to old classes not able to be cleaned and even being used. If you can not clean that cache or restart the framework totally, then it would lead to your development server out of memory or even unexpected behaviours ( from the execution on old classes )
- One trick to deal with the complex framework setup is to broaden the DynamicClassLoader's classpaths and cover all the libraries, so that all the external libraries classes will also be reloaded with each reloading cycle. There is no way a cache can exist if the classes are dropped together with their static members. You may argue here that those libraries may be used be the persisted part of our system (like Log4J used in webserver), my answer is yes, let it be 2 versions of those libraries in use, one for the persisted part and one for the reloaded part.
- In case of web-applications, you must not store a complex object into session. "Complex object" mean the objects with classes need to be reloaded. Try to store it's attributes like id, name only, or you can serialize the object with json and store it. You would not want our session hold reference to the old definition of the class.



Conclusion:
===

So the key factor to achieve this is to have a super clean design, and with such you can freely manipulate your classes and the whole JVM

What if you don't have a super clean design
--------

Then try to make a super clean design first, because without that, you will never be able to achieve the target. Even if you are quite confident with your design already, but just a little bit confused at some point, then some classes may not be totally cleaned, they will still have link back to the application and thus generate ghost-like behaviors that no one will enjoy. But don't worry, this will only happen during development, and will not affect the customers.

It is a fact, class reloading is very difficult, I'm not trying to scare you. But if you started to do it and at some point you find your classes be loaded on the fly, then you are almost there already. There will be very little thing left to do before you can achieve totally superb clean design for your system.

Good luck my friends and hope you all can do it.



















